---
import Slider from '../components/Slider.astro'
import Accordions from '../components/Accordions.astro'
import Accordion from '../components/Accordion.astro'
import InternalNavigation from '../components/Navigation/InternalNavigation.astro'
import Modal from '../components/Modal/Modal.astro'
import Layout from '../layouts/Layout.astro'
import '../styles/settings/design.scss'
import { OptionsType } from '@fancyapps/ui/types/Fancybox/options'
import Picture from '../components/Picture.astro'
import Hero from '../components/Hero/Hero.astro'

const modalOptions: Partial<OptionsType> = {
  closeButton: true
}
---

<Layout
  title='Design System'
  pageClass='design'
  showFooter={false}
  showISI={false}
  showHeader={false}
  page='design'
>
  <InternalNavigation
    page='design'
    addWrapper={false}
    highlightOnScroll={true}
    scrollToActiveItem={true}
    isFixed={true}
  />
  <main>
    <h1>
      Design System
      <a href='/' style='font-size: 1.25rem; float: right;'> &laquo; Home</a>
    </h1>
    <section id='design-colors' class='design-system-section'>
      <div class='section-wrapper section-wrapper--small'>
        <h1 class='title'>Colors</h1>
        <div class='colors'>
          <div class='color'>
            <div class='color__box' style='background-color: #000000;'>
              <p class='color__hex' style='color: white;'>#000000</p>
            </div>
            <p class='color__variable'>$color-black</p>
          </div>
          <div class='color'>
            <div
              class='color__box'
              style='background-color: #ffffff; border: 1px solid #000'
            >
              <p class='color__hex'>#ffffff</p>
            </div>
            <p class='color__variable'>$color-white</p>
          </div>
        </div>
      </div>
    </section>

    <section id='design-fonts' class='design-system-section'>
      <div class='section-wrapper section-wrapper--small'>
        <h1 class='title'>Fonts</h1>

        <div class='fonts-preview'>
          <h2>Roboto</h2>
          <p>AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz</p>
          <p>1234567890</p>
          <p>!@#$%^&*(</p>
        </div>

        <table>
          <thead>
            <tr>
              <th>Tag</th>
              <th>Weight</th>
              <th>Size</th>
              <th>Line height</th>
            </tr>
          </thead>
          <tbody>
            <tr class='h1'>
              <td>h1</td>
              <td>Bold</td>
              <td>40px</td>
              <td>46.88px</td>
            </tr>
            <tr class='h2'>
              <td>h2</td>
              <td>600</td>
              <td>30px</td>
              <td>35.16px</td>
            </tr>
            <tr class='h3'>
              <td>h3</td>
              <td>500</td>
              <td>24px</td>
              <td>28.13px</td>
            </tr>
            <tr class='h4'>
              <td>h4</td>
              <td>500</td>
              <td>20px</td>
              <td>23.44px</td>
            </tr>
            <tr class='h5'>
              <td>h5</td>
              <td>500</td>
              <td>16px</td>
              <td>24px</td>
            </tr>
            <tr class='p'>
              <td>p</td>
              <td>400</td>
              <td>18px</td>
              <td>21.09px</td>
            </tr>
            <tr class='small'>
              <td>small</td>
              <td>300</td>
              <td>12px</td>
              <td>14.06px</td>
            </tr>
          </tbody>
        </table>
      </div>
    </section>
    <section id='design-buttons' class='design-system-section'>
      <div class='section-wrapper section-wrapper--small'>
        <h1 class='title'>Buttons</h1>
        <div class='buttons'>
          <!-- Default button -->
          <button class='button'> Button Primary / Default</button>
          <button class='button button--secondary'> Button Secondary</button>
          <button class='button button--tertiary'> Tertiary Button</button>
        </div>
        <div class='example-code'>
          <button class='copy-clipboard' aria-labelledby='btn-code'>Copy</button
          >
          <pre
            class='code'
            id='btn-code'>
            <code>
&lt;!-- Default / Primary button --&gt;
&lt;button class='button'&gt; Button Primary / Default&lt;/button&gt;

&lt;!-- Secondary button --&gt;
&lt;button class='button button--secondary'&gt; Button Secondary&lt;/button&gt;

&lt;!-- Tertiary button --&gt;
&lt;button class='button button--tertiary'&gt; Tertiary Button&lt;/button&gt;
            </code>

          </pre>
        </div>
      </div>
    </section>
    <section id='design-tabs' class='design-system-section'>
      <div class='section-wrapper section-wrapper--small'>
        <h1 class='title'>Tabs</h1>
        <p>
          Tabs are used to separate content into different sections that can be
          shown or hidden by the user.
        </p>
        <table class='table-props'>
          <thead>
            <tr style='text-align: left;'>
              <th> props</th>
              <th> type</th>
              <th> description</th>
            </tr>
          </thead>
          <tbody>
            <tr style='text-align: left;'>
              <td> data-horizontal-scroll</td>
              <td> data attribute</td>
              <td>
                will enable an automatic horizontal scroll in order to be
                visible always the active one</td
              >
            </tr>
          </tbody>
        </table>
        <br />

        <ul role='tablist' data-horizontal-scroll>
          <li role='presentation'>
            <!--active one -->
            <a href='#panel1' role='tab' id='tab1' aria-selected='true'>Tab 1</a
            >
          </li>
          <li role='presentation'>
            <a href='#panel2' role='tab' id='tab2' tabindex='-1'>Tab 2</a>
          </li>
          <li role='presentation'>
            <a href='#panel3' role='tab' id='tab3' tabindex='-1'>Tab 3</a>
          </li>
        </ul>
        <section
          id='panel1'
          role='tabpanel'
          aria-labelledby='tab1'
          aria-hidden='false'
          tabindex='-1'
        >
          <h2>Panel 1</h2>
          <p>
            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas
            dui nibh, fermentum ac gravida quis, <a href='#'>tempus sit</a> amet
            nulla. Fusce dignissim dolor sit amet sapien auctor, eu vehicula elit
            placerat. Aliquam vehicula luctus enim, at ullamcorper risus. Aliquam
            ut tincidunt ipsum. Vivamus dui mi, suscipit vitae libero id, interdum
            aliquet metus.
          </p>
        </section>
        <section
          id='panel2'
          role='tabpanel'
          aria-labelledby='tab2'
          aria-hidden='true'
          tabindex='-1'
          hidden
        >
          <h2>Panel 2</h2>
          <p>
            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas
            dui nibh, fermentum ac gravida quis, <a href='#'>tempus sit</a> amet
            nulla. Fusce dignissim dolor sit amet sapien auctor, eu vehicula elit
            placerat. Aliquam vehicula luctus enim, at ullamcorper risus. Aliquam
            ut tincidunt ipsum. Vivamus dui mi, suscipit vitae libero id, interdum
            aliquet metus.
          </p>
        </section>
        <section
          id='panel3'
          role='tabpanel'
          aria-labelledby='tab3'
          aria-hidden='true'
          tabindex='-1'
          hidden
        >
          <h2>Panel 3</h2>
          <p>
            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas
            dui nibh, fermentum ac gravida quis, <a href='#'>tempus sit</a> amet
            nulla. Fusce dignissim dolor sit amet sapien auctor, eu vehicula elit
            placerat. Aliquam vehicula luctus enim, at ullamcorper risus. Aliquam
            ut tincidunt ipsum. Vivamus dui mi, suscipit vitae libero id, interdum
            aliquet metus.
          </p>
        </section>

        <div class='example-code'>
          <button class='copy-clipboard' aria-labelledby='tabs-code'
            >Copy</button
          >
          <pre
            class='code'
            id='tabs-code'>
            <code>
&lt;ul role='tablist' <b>data-horizontal-scroll</b>&gt;
  &lt;li role='presentation'&gt;
    &lt;!--active one --&gt;
    &lt;a href='#example-panel1' role='tab' id='example-tab1' aria-selected='true'&gt;Tab 1&lt;/a&gt;
  &lt;/li&gt;

  &lt;li role='presentation'&gt;
    &lt;a href='#example-panel2' role='tab' id='example-tab2' tabindex='-1' &gt;Tab 2&lt;/a&gt;
  &lt;/li&gt;

  ...
&lt;/ul&gt;

&lt;section id='example-panel1' role='tabpanel' aria-labelledby='example-tab1' aria-hidden='false' tabindex='-1' &gt;
  1 - Lorem ipsum dolor sit amet, consectetur adipiscing elit.
&lt;/section&gt;

&lt;section id='example-panel2' role='tabpanel' aria-labelledby='example-tab2' aria-hidden='true' tabindex='-1' hidden&gt;
  2 - Lorem ipsum dolor sit amet, consectetur adipiscing elit.
&lt;/section&gt;
...
          </code>
          </pre>
        </div>
      </div>
    </section>
    <section id='design-accordions' class='design-system-section'>
      <div class='section-wrapper section-wrapper--small'>
        <h1 class='title'>Accordions</h1>
        <p>
          Accordions component is a wrapper for accordion-item components and
          enable properties in order to control the behaviour of the
          accordion-items wrapped.
        </p>
        <br />
        <table class='table-props'>
          <thead>
            <tr style='text-align: left;'>
              <th> props</th>
              <th> type</th>
              <th> description</th>
            </tr>
          </thead>
          <tbody>
            <tr style='text-align: left;'>
              <td> name</td>
              <td> string</td>
              <td>
                Required to match with the corresponding accordion-items group
              </td>
            </tr>
            <tr style='text-align: left;'>
              <td> expandAll</td>
              <td> boolean</td>
              <td>
                All accordion-items in a group will be expanded (default: false)
              </td>
            </tr>
            <tr style='text-align: left;'>
              <td> expandable</td>
              <td> boolean</td>
              <td>
                The expandable and colapsable feature will be enabled (default:
                false)
              </td>
            </tr>
            <tr style='text-align: left;'>
              <td> expandBehavior</td>
              <td> string</td>
              <td>
                if 'single', only one accordion-item will be expanded at a time
                (default: 'multiple')
              </td>
            </tr>
          </tbody>
        </table>
        <br />

        <Accordions name='accordion-group-name' expandable>
          <Accordion id='1' header='ACC-1' expanded>
            <p>
              Lorem ipsum dolor sit amet consectetur adipisicing elit. Deleniti,
              pariatur labore perspiciatis repudiandae aliquid quae doloribus!
              Ratione, fugiat quae ad dolor voluptatum esse laborum porro id non
              animi, sapiente exercitationem.
            </p>
          </Accordion>
          <Accordion id='2' header='ACC-2'>
            <p>
              Lorem ipsum dolor sit amet consectetur adipisicing elit. Deleniti,
              pariatur labore perspiciatis repudiandae aliquid quae doloribus!
              Ratione, fugiat quae ad dolor voluptatum esse laborum porro id non
              animi, sapiente exercitationem.
            </p>
          </Accordion>
          <Accordion id='3' header='ACC-3'>
            <p>
              Lorem ipsum dolor sit amet consectetur adipisicing elit. Deleniti,
              pariatur labore perspiciatis repudiandae aliquid quae doloribus!
              Ratione, fugiat quae ad dolor voluptatum esse laborum porro id non
              animi, sapiente exercitationem.
            </p>
          </Accordion>
        </Accordions>

        <div class='example-code'>
          <button class='copy-clipboard' aria-labelledby='acc-code'>Copy</button
          >
          <pre
            class='code'
            id='acc-code'>
          <code>
---
  import Accordions from '../components/Accordions.astro'
  import Accordion from '../components/Accordion.astro'
---

&lt;Accordions name='accordion-group-name' expandable&gt;
  &lt;Accordion id='1' header='ACC-1' expanded&gt;
    &lt;p&gt;
      Lorem ipsum dolor sit amet consectetur adipisicing elit. Deleniti, pariatur labore perspiciatis repudiandae aliquid quae doloribus! Ratione, fugiat quae ad dolor voluptatum esse laborum porro id non animi, sapiente exercitationem.
    &lt;/p&gt;
  &lt;/Accordion&gt;
  &lt;Accordion id='2' header='ACC-2'&gt;
    &lt;p&gt;
      Lorem ipsum dolor sit amet consectetur adipisicing elit. Deleniti, pariatur labore perspiciatis repudiandae aliquid quae doloribus! Ratione, fugiat quae ad dolor voluptatum esse laborum porro id non animi, sapiente exercitationem.
    &lt;/p&gt;
  &lt;/Accordion&gt;
  &lt;Accordion id='3' header='ACC-3'&gt;
    &lt;p&gt;
      Lorem ipsum dolor sit amet consectetur adipisicing elit. Deleniti, pariatur labore perspiciatis repudiandae aliquid quae doloribus! Ratione, fugiat quae ad dolor voluptatum esse laborum porro id non animi, sapiente exercitationem.
    &lt;/p&gt;
  &lt;/Accordion&gt;
&lt;/Accordions&gt;
...
          </code>
          </pre>
        </div>
      </div>
    </section>

    <section id='design-slide' class='design-system-section'>
      <h2>Swiper.js Element Slider</h2>
      <span>
        <a
          href='https://swiperjs.com/element'
          target='_blank'
          style='text-decoration: underline;'>Documentation how to use it.</a
        >
      </span>
      <br />
      <Slider />
      <br />
      <p>
        This code will create a new slider. Modified the attributes values or
        add others.
      </p>
      <div class='example-code'>
        <button class='copy-clipboard' aria-labelledby='slider-code'
          >Copy</button
        >
        <pre
          class='code'
          id='slider-code'>
          <code>
&lt;swiper-container navigation='true' pagination='true' scrollbar='false'&gt;
  &lt;swiper-slide&gt;
    &lt;img src='https://placehold.jp/2000x500.png' alt='Image as example 1' /&gt;
  &lt;/swiper-slide&gt;
  &lt;swiper-slide&gt;
    &lt;p class='myswiper-custum-text'&gt;
      Lorem ipsum dolor sit amet consectetur adipisicing elit. Quas ut sed
      deleniti dolores dignissimos repellendus, possimus, impedit officiis
      commodi earum numquam provident quos natus, qui quisquam temporibus
      dolorem harum eligendi!
    &lt;/p&gt;
  &lt;/swiper-slide&gt;
  ...
&lt;/swiper-container&gt;
          </code>

        </pre>
      </div>
      <p>To make it globally available, add following code to Layout.astro</p>
      <div class='example-code'>
        <button class='copy-clipboard' aria-labelledby='slider-layout-code'
          >Copy</button
        >
        <pre
          class='code'
          id='slider-layout-code'>
          <code class="language-jsx">
&lt;script&gt;
  import &#123; register &#125; from 'swiper/element/bundle'

  register()
&lt;/script&gt;
          </code>

        </pre>
      </div>
    </section>

    <section id='design-picture' class='design-system-section'>
      <h1 class='title'>Picture</h1>
      <p>
        The picture component takes an src attribute and generates responsive
        sources. The default image must be the mobile size.
      </p>
      <table class='table-props'>
        <thead>
          <tr style='text-align: left;'>
            <th> props</th>
            <th> type</th>
            <th> description</th>
          </tr>
        </thead>
        <tbody>
          <tr style='text-align: left;'>
            <td> id</td>
            <td> string</td>
            <td> Generates an id in the picture element.</td>
          </tr>

          <tr style='text-align: left;'>
            <td> className</td>
            <td> string</td>
            <td> Generates a class in the picture element.</td>
          </tr>

          <tr style='text-align: left;'>
            <td> imgClassName</td>
            <td> string</td>
            <td> Generates a class in the img element.</td>
          </tr>

          <tr style='text-align: left;'>
            <td> src</td>
            <td> string</td>
            <td>
              Required prop. This is used to generate the src of the img element
              and each srcset in the source elements.
            </td>
          </tr>

          <tr style='text-align: left;'>
            <td> alt</td>
            <td> string</td>
            <td> Required prop. Alt text for the img element.</td>
          </tr>

          <tr style='text-align: left;'>
            <td> media</td>
            <td> array</td>
            <td>
              An array of objects. Each object should have a key of the media
              query and the value will be the prefix in srcset attribute.
            </td>
          </tr>

          <tr style='text-align: left;'>
            <td> isLazy</td>
            <td> boolean</td>
            <td>
              If true, the img element will have a loading attribute with a lazy
              value. (Default: false, will add the loading attribute with a
              value of eager)
            </td>
          </tr>

          <tr style='text-align: left;'>
            <td> attrs</td>
            <td> string</td>
            <td>
              Any other attribute that you want to add to the img element.</td
            >
          </tr>
        </tbody>
      </table>
      <br />
      <Picture
        id='test-image'
        src='/assets/images/picture-component/test-image.png'
        alt='Test image'
        className='test-image'
        imgClassName='test-image__img'
        media={[
          {
            '(min-width: 1600px)': 'desktop-lg'
          }
        ]}
        isLazy
        data-test='true'
      />

      <div class='example-code'>
        <button class='copy-clipboard' aria-labelledby='picture-code'
          >Copy</button
        >
        <pre
          class='code'
          id='picture-code'>
          <code class="language-jsx">
---
  import Picture from '../components/Picture.astro'
---

&lt;Picture
  id='test-image'
  src='/assets/images/picture-component/test-image.png'
  alt='Test image'
  className='test-image'
  imgClassName='test-image__img'
  media=&#123;[
    &#123;
      '(min-width: 1600px)': 'desktop-lg'
    &#125;
  ]&#125;
  isLazy
  data-test='true'
/&gt;
          </code>
        </pre>
      </div>
    </section>

    <section id='design-modal' class='design-system-section'>
      <h2 class='design-system-section__title'>Modal</h2>
      <br />
      <button
        class='button button--primary'
        data-modal-trigger='event-form-modal'>Modal 1</button
      >
      <br />

      <h3><strong>How to use it:</strong></h3>
      <br />

      <h3>Add html</h3>
      <br />
      <p>
        The modal uses different properties to identify the parts of its content
        and apply certain CSS styles:
      </p>
      <ul>
        <li>Header: <strong>data-modal-header</strong></li>
        <li>Title: <strong>data-modal-title</strong></li>
        <li>
          Close button: <strong>data-modal-close</strong> =&gt; very important
        </li>
        <li>Content: <strong>data-modal-content</strong></li>
        <li>Actions container: <strong>data-modal-actions</strong></li>
      </ul>

      <div class='example-code'>
        <button class='copy-clipboard' aria-labelledby='html-modal-code'
          >Copy</button
        >
        <pre
          class='code'
          id='html-modal-code'>
          <code class="language-jsx">
---
  import Modal from '../components/Modal/Modal.astro'
---

&lt;Modal id="custom-modal" className="custom-modal"&gt;
  &lt;Fragment&gt;
    &lt;div&gt;
      &lt;div <strong>data-modal-header</strong>&gt;
        &lt;h1 <strong>data-modal-title</strong>&gt;Modal title&lt;/h1&gt;
        &lt;button <strong>data-modal-close</strong>&gt;X&lt;/button&gt;
      &lt;/div&gt;

      &lt;div <strong>data-modal-content</strong>&gt;
        &lt;p&gt;
          Lorem ipsum dolor sit amet consectetur adipisicing elit. Earum
          officiis mollitia cum amet quas quisquam soluta omnis, iusto, rem
          veritatis dicta a optio aperiam vel corrupti recusandae vero harum
          nisi!
        &lt;/p&gt;
      &lt;/div&gt;

      &lt;div <strong>data-modal-actions</strong>&gt;
        &lt;button <strong>data-modal-close</strong>&gt;Close&lt;/button&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/Fragment&gt;
&lt;/Modal&gt;
          </code>
          </pre>
      </div>

      <br />

      <h3>Triggers</h3>
      <br />
      <p>
        For a DOM element to open the modal, it must have the data-modal-trigger
        property with the modal's ID as its value.
      </p>

      <div class='example-code'>
        <button class='copy-clipboard' aria-labelledby='html-modal-trigger-code'
          >Copy</button
        >
        <pre
          class='code'
          id='html-modal-trigger-code'>
          <code>
&lt;Modal id="custom-modal" &gt; ... &lt;/Modal&gt;
...

&lt;button <strong>data-modal-trigger="custom-modal"</strong>&gt;Open custom modal&lt;/button&gt;
          </code>
          </pre>
      </div>
      <br />

      <h3>Config modal fancybox instance</h3>
      <br />

      <p class='note'>
        <strong>NOTE:</strong> Currently, we can only send static properties in the
        configuration. Sending functions will have no effect; they simply won't work.
        If we send a function for any Fancybox event, it will overwrite the default
        function, and the modal may not work as expected.
      </p>

      <div class='example-code'>
        <button class='copy-clipboard' aria-labelledby='html-modal-config-code'
          >Copy</button
        >
        <pre
          class='code'
          id='html-modal-config-code'>
          <code class="language-jsx">
---
import Modal from '../components/Modal/Modal.astro'
import &#123; OptionsType &#125; from '@fancyapps/ui/types/Fancybox/options'

const modalOptions: Partial&#60;OptionsType&#62; = &#123;
  closeButton: true
&#125;
---

&lt;Modal id="custom-modal" options=&#123;modalOptions&#125;&gt;
...
&lt;/Modal&gt;
          </code>
          </pre>
      </div>
      <small style='display: flex;'
        >Learn more about Fancybox options <a
          target='_blank'
          href='https://fancyapps.com/fancybox/api/options/#available-options'
          style='text-decoration: underline; padding-left: 2px;'
        >
          here</a
        ></small
      >
      <br />

      <h3>How to listen modal events</h3>
      <br />
      <small>Available events</small>
      <ul>
        <li>init</li>
        <li>ready</li>
        <li>resize</li>
        <li>done</li>
        <li>shouldClose</li>
        <li>close</li>
        <li>destroy</li>
      </ul>
      <br />

      <div class='example-code'>
        <button class='copy-clipboard' aria-labelledby='html-modal-events-code'
          >Copy</button
        >
        <pre
          class='code'
          id='html-modal-events-code'>
          <code>
document.addEventListener('modal:ready', (&#123; detail &#125;) =&gt; &#123;
  const &#123; fancybox, id, eventName &#125; = detail
&#125;)
          </code>
          </pre>
      </div>
      <small style='display: flex;'
        >Learn more about Fancybox events <a
          target='_blank'
          href='https://fancyapps.com/fancybox/api/events/#available-events'
          style='text-decoration: underline; padding-left: 2px;'
        >
          here</a
        ></small
      >
      <br />

      <p>
        When using your component on multiple pages, Astro will create a
        separate stylesheet specifically for your component's styles. You can
        read more about it <a
          href='https://docs.astro.build/en/guides/styling/#production'
          target='_blank'
          rel='noopener noreferrer'>here</a
        >.
      </p>
      <br />
      <p>
        Also, read the documentation of <a
          href='https://docs.astro.build/en/guides/styling/'
          target='_blank'
          rel='noopener noreferrer'>Astro Framework</a
        > regarding how styles are handled.
      </p>
      <br />

      <p>
        To properly name those styles that Astro will compile, you should add
        the following comment on line 1 of the .scss file:
      </p>
      <br />

      <div class='example-code'>
        <button class='copy-clipboard' aria-labelledby='html-modal-styles-code'
          >Copy</button
        >
        <pre
          class='code'
          id='html-modal-styles-code'>
          <code>
/* &#123;outputFileName:modal&#125; */
          </code>
          </pre>
      </div>
      <br />

      <p>
        You should replace modal with the name your file should have upon
        compilation. This applies to all .scss files, for example, the one for
        each page.
      </p>
      <p>
        You can find more information about this in the configuration file of
        this project (astro.config.mjs).
      </p>
      <br />

      <h3>Add the corresponding script to your component:</h3>

      <div class='example-code'>
        <button
          class='copy-clipboard'
          aria-labelledby='script-modal-config-code'>Copy</button
        >
        <pre
          class='code'
          id='script-modal-config-code'>
          <code>
&lt;script src='./modal.ts'&gt;&lt;/script&gt;
          </code>
          </pre>
      </div>
      <br />

      <p>This is how it's done in the modal component.</p>

      <Modal
        id='event-form-modal'
        className='event-form-modal'
        options={modalOptions}
      >
        <Fragment>
          <div>
            <div data-modal-header>
              <h1 class='modal__title' data-modal-title>Modal content 1</h1>
              <button data-modal-close>
                <svg
                  xmlns='http://www.w3.org/2000/svg'
                  width='24'
                  height='24'
                  viewBox='0 0 24 24'
                  style='fill: rgba(0, 0, 0, 1);transform: ;msFilter:;'
                  ><path
                    d='m16.192 6.344-4.243 4.242-4.242-4.242-1.414 1.414L10.535 12l-4.242 4.242 1.414 1.414 4.242-4.242 4.243 4.242 1.414-1.414L13.364 12l4.242-4.242z'
                  ></path></svg
                >
              </button>
            </div>
            <div class='modal__text' data-modal-content>
              <p>
                Lorem ipsum dolor sit amet consectetur adipisicing elit. Earum
                officiis mollitia cum amet quas quisquam soluta omnis, iusto,
                rem veritatis dicta a optio aperiam vel corrupti recusandae vero
                harum nisi!
              </p>
              <button
                class='button button--primary'
                data-modal-trigger='inner-modal'>Inner Modal</button
              >

              <Modal id='inner-modal' className='inner-modal'>
                <Fragment>
                  <div>
                    <div data-modal-header>
                      <h1 class='modal__title' data-modal-title>
                        Modal content 1
                      </h1>
                      <button data-modal-close>
                        <svg
                          xmlns='http://www.w3.org/2000/svg'
                          width='24'
                          height='24'
                          viewBox='0 0 24 24'
                          style='fill: rgba(0, 0, 0, 1);transform: ;msFilter:;'
                          ><path
                            d='m16.192 6.344-4.243 4.242-4.242-4.242-1.414 1.414L10.535 12l-4.242 4.242 1.414 1.414 4.242-4.242 4.243 4.242 1.414-1.414L13.364 12l4.242-4.242z'
                          ></path></svg
                        >
                      </button>
                    </div>
                    <div class='modal__text' data-modal-content>
                      <p>
                        Lorem ipsum dolor sit amet consectetur adipisicing elit.
                        Earum officiis mollitia cum amet quas quisquam soluta
                        omnis, iusto, rem veritatis dicta a optio aperiam vel
                        corrupti recusandae vero harum nisi!
                        <button
                          class='button button--primary'
                          data-modal-trigger='super-inner-modal'
                          >Super Inner Modal</button
                        >

                        <Modal
                          id='super-inner-modal'
                          className='super-inner-modal'
                        >
                          <Fragment>
                            <div>
                              <div data-modal-header>
                                <h1 class='modal__title' data-modal-title>
                                  Modal content 1
                                </h1>
                                <button data-modal-close>
                                  <svg
                                    xmlns='http://www.w3.org/2000/svg'
                                    width='24'
                                    height='24'
                                    viewBox='0 0 24 24'
                                    style='fill: rgba(0, 0, 0, 1);transform: ;msFilter:;'
                                    ><path
                                      d='m16.192 6.344-4.243 4.242-4.242-4.242-1.414 1.414L10.535 12l-4.242 4.242 1.414 1.414 4.242-4.242 4.243 4.242 1.414-1.414L13.364 12l4.242-4.242z'
                                    ></path></svg
                                  >
                                </button>
                              </div>
                              <div class='modal__text' data-modal-content>
                                <p>
                                  Lorem ipsum dolor sit amet consectetur
                                  adipisicing elit. Earum officiis mollitia cum
                                  amet quas quisquam soluta omnis, iusto, rem
                                  veritatis dicta a optio aperiam vel corrupti
                                  recusandae vero harum nisi!
                                </p>
                              </div>
                              <div class='modal__actions' data-modal-actions>
                                <button class='button' data-modal-close
                                  >Close</button
                                >
                              </div>
                            </div>
                          </Fragment>
                        </Modal>
                      </p>
                    </div>
                    <div class='modal__actions' data-modal-actions>
                      <button class='button' data-modal-close>Close</button>
                    </div>
                  </div>
                </Fragment>
              </Modal>
            </div>
            <div class='modal__actions' data-modal-actions>
              <button class='button' data-modal-close>Close</button>
            </div>
          </div>
        </Fragment>
      </Modal>
    </section>
    <section id='design-internal-nav' class='design-system-section'>
      <div class='section-wrapper section-wrapper--small'>
        <h1 class='title'>Internal Navigation</h1>
        <table class='table-props'>
          <thead>
            <tr style='text-align: left;'>
              <th> props</th>
              <th> type</th>
              <th> description</th>
            </tr>
          </thead>
          <tbody>
            <tr style='text-align: left;'>
              <td> page</td>
              <td> string</td>
              <td>
                Required. Allows astro component to get the correct settings
                from navigationData
              </td>
            </tr>
            <tr style='text-align: left;'>
              <td> addWrapper</td>
              <td> boolean</td>
              <td>
                Adds wrapper class to .internal-nav__container. (Default: true)
              </td>
            </tr>
            <tr style='text-align: left;'>
              <td> wrapperClassname</td>
              <td> string</td>
              <td>
                Allows to set a custom wrapper classname instead of '.wrapper'
                if addWrapper is set as true. (Default: .wrapper)
              </td>
            </tr>
            <tr style='text-align: left;'>
              <td> scrollToActiveItem</td>
              <td> string</td>
              <td>
                Enable/Disable Internal Navigation's behavior to scroll the list
                to the selected item (onScroll and onClick). (Default: false)
              </td>
            </tr>
            <tr style='text-align: left;'>
              <td> highlightOnScroll</td>
              <td> string</td>
              <td>
                Enable/Disable Internal Navigation's behavior to highlight item
                that has the reference of the visible section. (Default: false)
              </td>
            </tr>
            <tr style='text-align: left;'>
              <td> isFixed</td>
              <td> string</td>
              <td>
                Enable/Disable Internal Navigation's behavior to get
                position:fixed on scrolling. (Default: true)
              </td>
            </tr>
          </tbody>
        </table>

        <div class='example-code'>
          <button class='copy-clipboard' aria-labelledby='internal-nav-code'
            >Copy</button
          >
          <pre
            class='code'
            id='internal-nav-code'>
            <code class="language-jsx">
---
  import InternalNavigation from '../components/Navigation/
---

&lt;InternalNavigation
    page='design'
    addWrapper=&#123;false&#125;
    highlightOnScroll=&#123;true&#125;
    scrollToActiveItem=&#123;true&#125;
    isFixed=&#123;true&#125;
  /&gt;
            </code>

          </pre>
        </div>

        <h2 class='title'>Internal Navigation Data</h2>
        <table class='table-props'>
          <thead>
            <tr style='text-align: left;'>
              <th> props</th>
              <th> type</th>
              <th> description</th>
            </tr>
          </thead>
          <tbody>
            <tr style='text-align: left;'>
              <td> elementsBeforeNav</td>
              <td> array</td>
              <td>
                Array of objects that allows internal navigation knows elements
                to take in count in calculations
              </td>
            </tr>
            <tr style='text-align: left;'>
              <td> navigationItems</td>
              <td> Object</td>
              <td>
                Object that contains name of pages as keys and array of
                navigation items as values
              </td>
            </tr>
          </tbody>
        </table>

        <div class='example-code'>
          <button
            class='copy-clipboard'
            aria-labelledby='internal-nav-data-code'>Copy</button
          >
          <pre
            class='code'
            id='internal-nav-data-code'>
            <code class="language-js">
const navigationData = &#123;
  elementsBeforeNav: [
    &#123; mainSelector: '.test-section-a', positionOnScroll: 'fixed' &#125;,
    &#123; mainSelector: '.test-section-b', positionOnScroll: 'fixed' &#125;,
    &#123; mainSelector: '.hero-test', positionOnScroll: 'relative' &#125;
  ],
  navigationItems: &#123;
    design: [
      &#123; href: 'design-colors', label: 'Colors', active: true &#125;,
      &#123; href: 'design-fonts', label: 'Fonts' &#125;,
      &#123; href: 'design-buttons', label: 'Buttons' &#125;,
      &#123; href: 'design-tabs', label: 'Tabs' &#125;,
      &#123; href: 'design-accordions', label: 'Accordions' &#125;,
      &#123; href: 'design-slide', label: 'Slider' &#125;,
      &#123; href: 'design-picture', label: 'Picture' &#125;,
      &#123; href: 'design-modal', label: 'Modal' &#125;
    ],
    'internal-navigation-test': [
      &#123; href: 'colors', label: 'Colors', active: true &#125;,
      &#123; href: 'fonts', label: 'Fonts' &#125;,
      &#123; href: 'buttons', label: 'Buttons' &#125;,
      &#123; href: 'tabs', label: 'Tabs' &#125;,
      &#123; href: 'accordions', label: 'Accordions' &#125;
    ]
  &#125;
&#125;

export default navigationData
            </code>

          </pre>
        </div>
      </div>
    </section>
    <table>
      <thead>
        <tr style='text-align: left;'>
          <th> props</th>
          <th> type</th>
          <th> description</th>
        </tr>
      </thead>
      <tbody>
        <tr style='text-align: left;'>
          <td> id</td>
          <td> string</td>
          <td> Generates an id in the picture element.</td>
        </tr>

        <tr style='text-align: left;'>
          <td> className</td>
          <td> string</td>
          <td> Generates a class in the picture element.</td>
        </tr>

        <tr style='text-align: left;'>
          <td> imgClassName</td>
          <td> string</td>
          <td> Generates a class in the img element.</td>
        </tr>

        <tr style='text-align: left;'>
          <td> src</td>
          <td> string</td>
          <td>
            Required prop. This is used to generate the src of the img element
            and each srcset in the source elements.
          </td>
        </tr>

        <tr style='text-align: left;'>
          <td> alt</td>
          <td> string</td>
          <td> Required prop. Alt text for the img element.</td>
        </tr>

        <tr style='text-align: left;'>
          <td> media</td>
          <td> array</td>
          <td>
            An array of objects. Each object should have a key of the media
            query and the value will be the prefix in srcset attribute.
          </td>
        </tr>

        <tr style='text-align: left;'>
          <td> isLazy</td>
          <td> boolean</td>
          <td>
            If true, the img element will have a loading attribute with a lazy
            value. (Default: false, will add the loading attribute with a value
            of eager)
          </td>
        </tr>

        <tr style='text-align: left;'>
          <td> attrs</td>
          <td> string</td>
          <td> Any other attribute that you want to add to the img element.</td>
        </tr>
      </tbody>
    </table>
    <br />
    <Picture
      id='test-image'
      src='/assets/images/picture-component/test-image.png'
      alt='Test image'
      className='test-image'
      imgClassName='test-image__img'
      media={[
        {
          '(min-width: 1600px)': 'desktop-lg'
        }
      ]}
      isLazy
      data-test='true'
    />

    <section id='hero-header' class='design-system-section'>
      <h1 class='title'>Hero Header</h1>

      <h4>Astro props</h4>
      <table>
        <thead>
          <tr style='text-align: left;'>
            <th> prop</th>
            <th> type</th>
            <th> description</th>
          </tr>
        </thead>
        <tbody>
          <tr style='text-align: left;'>
            <td> fullHeight</td>
            <td> boolean</td>
            <td>
              Default 'false', optional. If true will set <code
                >height: 100vh;</code
              > to hero</td
            >
          </tr>
          <tr style='text-align: left;'>
            <td> layout</td>
            <td> 'flex' | 'absolute'</td>
            <td>
              Default 'flex', optional. if 'absolute' hero image will appear as
              a background. If 'flex' hero image will appear next to hero
              content</td
            >
          </tr>
          <tr style='text-align: left;'>
            <td> className</td>
            <td> string</td>
            <td>
              Default '', optional. Allows to set any custom css class to hero</td
            >
          </tr>
        </tbody>
      </table>

      <br />
      <br />

      <h4>Css variables</h4>
      <table>
        <thead>
          <tr style='text-align: left;'>
            <th> css variable</th>
            <th> default value</th>
            <th> description</th>
          </tr>
        </thead>
        <tbody>
          <tr style='text-align: left;'>
            <td> --hero-header-bg</td>
            <td> rgb(213 213 213)</td>
            <td
              >Background color of the hero header. Used to set the background
              color of the hero header section.</td
            >
          </tr>
          <tr style='text-align: left;'>
            <td> --hero-header-wrapper-margin</td>
            <td> 2rem</td>
            <td>
              Margin for the hero header wrapper. Used to define the margin
              around the hero header content wrapper.</td
            >
          </tr>
          <tr style='text-align: left;'>
            <td> --hero-header-max-width-content-wrapper</td>
            <td> calc(100% - var(--hero-header-wrapper-margin))</td>
            <td
              >Maximum width of the hero header content wrapper. Used to set the
              maximum width of the content wrapper within the hero header.</td
            >
          </tr>
          <tr>
            <td colspan='3' style='text-align: left; font-weight: 600;'
              >Variables to calculate hero height in 'absolute' layout</td
            >
          </tr>
          <tr style='text-align: left;'>
            <td>--hero-header-min-height</td>
            <td> 400</td>
            <td
              >Minimum height of the hero header. Used to set a minimum height
              to ensure it's not too small.</td
            >
          </tr>
          <tr style='text-align: left;'>
            <td>--hero-header-max-height</td>
            <td> 750</td>
            <td
              >Maximum height of the hero header. Used to prevent the hero
              header from being excessively large.</td
            >
          </tr>
          <tr style='text-align: left;'>
            <td>--hero-header-min-screen-size</td>
            <td> 320</td>
            <td>
              Minimum screen size for the hero header. Used to adjust the height
              on smaller screens.</td
            >
          </tr>
          <tr style='text-align: left;'>
            <td>--hero-header-max-screen-size</td>
            <td> 1440</td>
            <td
              >Maximum screen size for the hero header. Used to scale the height
              on larger screens.</td
            >
          </tr>
        </tbody>
      </table>

      <br />
      <br />

      <h3>'flex' layout hero</h3>
      <br />

      <div class='example-code'>
        <button class='copy-clipboard' aria-labelledby='flex-layout-hero'
          >Copy</button
        >
        <pre
          class='code'
          id='flex-layout-hero'>
          <code class="language-jsx hljs language-javascript">
&lt;Hero&gt;
    &lt;div slot=&quot;hero-content&quot; class=&quot;hero-header__cta&quot;&gt;
            &lt;h1&gt;Hero Header Title&lt;/h1&gt;
            &lt;p&gt;
                Lorem ipsum dolor sit amet consectetur adipisicing elit. Sunt error
                labore ex iusto esse est, reprehenderit rerum et vero! Quas
                voluptates at eligendi? Ipsum laudantium fugiat fuga? Nesciunt,
                incidunt provident.
            &lt;/p&gt;
            &lt;div class=&quot;hero-header__actions&quot;&gt;
                    &lt;button class=&quot;button button--primary&quot;&gt;Primary&lt;/button&gt;
                    &lt;button class=&quot;button button--secondary&quot;&gt;Secondary&lt;/button&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;Picture slot=&quot;hero-image&quot; src=&quot;/assets/images/hero/world.png&quot; alt=&quot;Hero image&quot; /&gt;
&lt;/Hero&gt;


          </code>

        </pre>
      </div>

      <Hero>
        <div slot='hero-content' class='hero__cta'>
          <h1>Hero Header Title</h1>
          <p>
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Sunt error
            labore ex iusto esse est, reprehenderit rerum et vero! Quas
            voluptates at eligendi? Ipsum laudantium fugiat fuga? Nesciunt,
            incidunt provident.
          </p>
          <div class='hero__actions'>
            <button class='button button--primary'>Primary</button>
            <button class='button button--secondary'>Secondary</button>
          </div>
        </div>
        <Picture
          slot='hero-image'
          src='/assets/images/hero/world.png'
          alt='Hero image'
        />
      </Hero>

      <br /><br /><br /><br />

      <h3>'absolute' layout hero</h3>
      <br />

      <div class='example-code'>
        <button class='copy-clipboard' aria-labelledby='flex-layout-hero'
          >Copy</button
        >
        <pre
          class='code'
          id='flex-layout-hero'>
          <code class="language-jsx hljs language-javascript">
&lt;Hero&gt;
    &lt;div slot=&quot;hero-content&quot; layout=&quot;absolute&quot; className=&quot;mountain-hero&quot; class=&quot;hero-header__cta&quot;&gt;
            &lt;h1&gt;Hero Header Title&lt;/h1&gt;
            &lt;p&gt;
                Lorem ipsum dolor sit amet consectetur adipisicing elit. Sunt error
                labore ex iusto esse est, reprehenderit rerum et vero! Quas
                voluptates at eligendi? Ipsum laudantium fugiat fuga? Nesciunt,
                incidunt provident.
            &lt;/p&gt;
            &lt;div class=&quot;hero-header__actions&quot;&gt;
                    &lt;button class=&quot;button button--primary&quot;&gt;Primary&lt;/button&gt;
                    &lt;button class=&quot;button button--secondary&quot;&gt;Secondary&lt;/button&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;Picture slot=&quot;hero-image&quot; src=&quot;/assets/images/hero/mountain.jpg&quot; alt=&quot;Hero image&quot; /&gt;
&lt;/Hero&gt;


          </code>

        </pre>
      </div>
      <Hero layout='absolute' className='mountain-hero'>
        <div slot='hero-content' class='hero__cta'>
          <h1>Hero Header Title</h1>
          <p>
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Sunt error
            labore ex iusto esse est, reprehenderit rerum et vero! Quas
            voluptates at eligendi? Ipsum laudantium fugiat fuga? Nesciunt,
            incidunt provident.
          </p>
          <div class='hero__actions'>
            <button class='button button--primary'>Primary</button>
            <button class='button button--secondary'>Secondary</button>
          </div>
        </div>
        <Picture
          slot='hero-image'
          src='/assets/images/hero/mountain.jpg'
          alt='Hero image'
        />
      </Hero>

      <br />

      <a href='./hero-test'>Test page</a>
    </section>
  </main>
</Layout>
<div class='space-at-bottom-for-navigation'></div>

<script>
  import hljs from 'highlight.js'
  hljs.highlightAll()
  import 'highlight.js/styles/github.css'
</script>
